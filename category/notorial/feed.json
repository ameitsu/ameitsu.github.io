{
    "version": "https://jsonfeed.org/version/1",
    "title": "Cyberpark Nichome • All posts by \"notorial\" category",
    "description": "本站基于hexo，同时部分内容来自一个在某只不愿透露姓名的猫娘上的脑机接口。没有任何猫娘因为本站而受到伤害。",
    "home_page_url": "http://ameitsu.github.io",
    "items": [
        {
            "id": "http://ameitsu.github.io/SofTY/Notorial/SofTY/Notorial/prompt-toolkit-print/",
            "url": "http://ameitsu.github.io/SofTY/Notorial/SofTY/Notorial/prompt-toolkit-print/",
            "title": "Notorial vol.1|Prompt toolkit库第一集：打印文本",
            "date_published": "2023-09-08T14:17:01.000Z",
            "content_html": "<div class=\"note info\">\n<p>此为 <code>Prompt toolkit</code>  系列的页面。本系列其他文章如下：<br />\n第一集：<strong>打印文本</strong><br />\n第二集：输入文本 <em>未更新</em><br />\n第三集：对话框 <em>未更新</em><br />\n第四集：进度条 <em>未更新</em><br />\n第五集：全屏程序制作 <em>未更新</em><br />\n第六集：拓展内容 <em>未更新</em><br />\n第七集：一些实例 <em>未更新</em><br />\n ova：有价值的内容与结束语 <em>未更新</em></p>\n</div>\n<div class=\"note default\">\n<p>在下文中，Prompt toolkit 简称为 PT。</p>\n</div>\n<h1 id=\"写在前面\"><a class=\"anchor\" href=\"#写在前面\">#</a> 写在前面</h1>\n<p>Python 的第三方库 prompt_toolkit 用于打造交互式命令行。本系列主要参考它的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9weXRob24tcHJvbXB0LXRvb2xraXQucmVhZHRoZWRvY3MuaW8vZW4vc3RhYmxlL2luZGV4Lmh0bWw=\">官方文档</span>。</p>\n<h1 id=\"下载pt\"><a class=\"anchor\" href=\"#下载pt\">#</a> 下载 PT</h1>\n<p>可以用 <code>pip</code>  或者 <code>anaconda</code> 。但是 STY 主要使用前者。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pip install prompt_toolkit</pre></td></tr></table></figure><h1 id=\"打印普通文本\"><a class=\"anchor\" href=\"#打印普通文本\">#</a> 打印普通文本</h1>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> prompt_toolkit <span class=\"token keyword\">import</span> print_formatted_text</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>print_formatted_text<span class=\"token punctuation\">(</span><span class=\"token string\">'Hello world'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://cdnjson.com/images/2023/09/08/1.jpg\" alt=\"1.jpg\" /><br />\n <code>print_formatted_text()</code>  可以用来打印普通文本。如果想以假乱真，可以酱紫：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> prompt_toolkit <span class=\"token keyword\">import</span> print_formatted_text <span class=\"token keyword\">as</span> <span class=\"token keyword\">print</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello world'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"打印格式化文本\"><a class=\"anchor\" href=\"#打印格式化文本\">#</a> 打印格式化文本</h1>\n<p>打印格式化文本需要这三种方法之一：创建 HTML 对象、创建 ANSI 对象、创建 <code>(样式,文本)</code>  元组或使用 <code>pygments</code>  库。STY 主要使用 HTML，毕竟已经学过了。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> prompt_toolkit <span class=\"token keyword\">import</span> print_formatted_text<span class=\"token punctuation\">,</span> HTML</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>print_formatted_text<span class=\"token punctuation\">(</span>HTML<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;b>This is bold&lt;/b>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>print_formatted_text<span class=\"token punctuation\">(</span>HTML<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;i>This is italic&lt;/i>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>print_formatted_text<span class=\"token punctuation\">(</span>HTML<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;u>This is underlined&lt;/u>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://cdnjson.com/images/2023/09/08/2.jpg\" alt=\"2.jpg\" /></p>\n<div class=\"note warning\">\n<p>实际上，这里的 <code>&lt;i&gt;&lt;/i&gt;</code>  标签没有被渲染成斜体，现在这大概率是个未解之谜。</p>\n</div>\n<p>使用 HTML 对象时，需要先 import 到程序中。这样一来，就可以直接使用 HTML 标签了。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>print_formatted_text<span class=\"token punctuation\">(</span>HTML<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;skyblue>This is sky blue&lt;/skyblue>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>print_formatted_text<span class=\"token punctuation\">(</span>HTML<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;seagreen>This is sea green&lt;/seagreen>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>print_formatted_text<span class=\"token punctuation\">(</span>HTML<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;violet>This is violet&lt;/violet>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://cdnjson.com/images/2023/09/08/3.jpg\" alt=\"3.jpg\" /><br />\n 也可以用颜色标签设置背景色。<br />\n为了更好编辑格式信息，可以将格式内容在一个字典中编写：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> prompt_toolkit <span class=\"token keyword\">import</span> print_formatted_text<span class=\"token punctuation\">,</span> HTML</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> prompt_toolkit<span class=\"token punctuation\">.</span>styles <span class=\"token keyword\">import</span> Style</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>style <span class=\"token operator\">=</span> Style<span class=\"token punctuation\">.</span>from_dict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token string\">'aaa'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'#ff0066'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token string\">'bbb'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'#44ff00 italic'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>print_formatted_text<span class=\"token punctuation\">(</span>HTML<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;aaa>Hello&lt;/aaa> &lt;bbb>world&lt;/bbb>!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> style<span class=\"token operator\">=</span>style<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://cdnjson.com/images/2023/09/08/4.jpg\" alt=\"4.jpg\" /></p>\n<div class=\"note info\">\n<p>在上一个实例中，像 <code>&lt;aaa&gt;&lt;/aaa&gt;</code>  的标签是自定义的。在 PT 中，可以使用自定义的标签，前提是和样式字典匹配。</p>\n</div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> prompt_toolkit <span class=\"token keyword\">import</span> print_formatted_text</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> prompt_toolkit<span class=\"token punctuation\">.</span>formatted_text <span class=\"token keyword\">import</span> FormattedText</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>text <span class=\"token operator\">=</span> FormattedText<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token string\">'#ff0066'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token string\">'#44ff00 italic'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'World'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>print_formatted_text<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>和 HTML 很像的方法是样式元组。此方法的大致内容与 HTML 对象类似，不再赘述。</p>\n<p>一个有用的函数是 <code>to_formatted_text()</code> 。它可以使输入符合格式化文本的要求：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> prompt_toolkit<span class=\"token punctuation\">.</span>formatted_text <span class=\"token keyword\">import</span> to_formatted_text<span class=\"token punctuation\">,</span> HTML</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> prompt_toolkit <span class=\"token keyword\">import</span> print_formatted_text</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>html <span class=\"token operator\">=</span> HTML<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;aaa>Hello&lt;/aaa> &lt;bbb>world&lt;/bbb>!'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>text <span class=\"token operator\">=</span> to_formatted_text<span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">,</span> style<span class=\"token operator\">=</span><span class=\"token string\">'class:my_html bg:#00ff00 italic'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>print_formatted_text<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "Notorial",
                "SofTY"
            ]
        },
        {
            "id": "http://ameitsu.github.io/SofTY/Notorial/SofTY/Notorial/index/",
            "url": "http://ameitsu.github.io/SofTY/Notorial/SofTY/Notorial/index/",
            "title": "Notorial系列介绍与索引",
            "date_published": "2023-09-07T15:33:55.000Z",
            "content_html": "<div class=\"note warning\">\n<p>此页面待补充 o (T ヘ To)</p>\n</div>\n<p>STY 经过深思熟虑后认为原先的 SofTY 系列的 “有趣程度” 不够，原因是其中的调侃成分与真正的技术部分掺杂在一起，而且涉及的技术难度不大。于是，SofTY 系列将拆分为 <code>SofTY-STorY</code>  和 <code>Notorial</code>  子系列，其中前者是即为原 SofTY 系列。现特别说明后者的主要内容并列出索引。</p>\n<h1 id=\"notorial是个什么东西\"><a class=\"anchor\" href=\"#notorial是个什么东西\">#</a> Notorial 是个什么东西？</h1>\n<p>Notorial 是 note 和 tutorial 的派生词。这个子系列中是 STY 学习某种技术时的笔记，但同时也可起到教程的作用，所以才有这个命名。</p>\n<h1 id=\"notorial现在有哪些内容\"><a class=\"anchor\" href=\"#notorial现在有哪些内容\">#</a> Notorial 现在有哪些内容？</h1>\n<ul>\n<li>Prompt-toolkit（一个 python 命令行库）<br />\n第一集：打印文本 <a href=\"https://ameitsu.github.io/SofTY/Notorial/SofTY/Notorial/prompt-toolkit-print/\">前往</a><br />\n关于普通文本和格式化文本的输出。<br />\n第二集：输入文本 <em>未更新</em><br />\n一些与输入文本有关的功能，如多行编辑、底部工具栏、自动补全等。<br />\n第三集：对话框 <em>未更新</em><br />\n第四集：进度条 <em>未更新</em><br />\n第五集：全屏程序制作 <em>未更新</em><br />\n第六集：拓展内容 <em>未更新</em><br />\n第七集：一些实例 <em>未更新</em><br />\n ova：有价值的内容与结束语 <em>未更新</em></li>\n</ul>\n",
            "tags": [
                "站内页面",
                "Notorial",
                "SofTY"
            ]
        }
    ]
}