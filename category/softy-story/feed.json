{
    "version": "https://jsonfeed.org/version/1",
    "title": "Cyberpark Nichome • All posts by \"softy-story\" category",
    "description": "STY的赛博后花园",
    "home_page_url": "https://ameitsu.github.io",
    "items": [
        {
            "id": "https://ameitsu.github.io/SofTY/SofTY-STorY/SofTY/SofTY-STorY/%E7%A7%91%E6%8A%80%E4%B8%8E%E4%B8%80%E6%A8%A1/",
            "url": "https://ameitsu.github.io/SofTY/SofTY-STorY/SofTY/SofTY-STorY/%E7%A7%91%E6%8A%80%E4%B8%8E%E4%B8%80%E6%A8%A1/",
            "title": "SofTYvol.3|科技与一模",
            "date_published": "2023-04-28T15:10:57.000Z",
            "content_html": "<p>啊，今天是 4 月 30 号，2023 年 4 月的最后一天。就在 40 个小时之前<ins>举世瞩目的</ins> 2023 年朝阳区初三一模结束了。SofTY 作为本站的编程 / 数学专栏真的有必要从数学压轴题里找点整活的灵感什么的。</p>\n<p>所以嘛，本篇的主题 —— 用<ins>科技和人工智慧</ins>攻克 16 题 (2) 和 28 题 (3)</p>\n<p>注意哦，是人工 <strong>智慧</strong></p>\n<p><span id=\"more\"></span></p>\n<h1 id=\"16题2问\"><a class=\"anchor\" href=\"#16题2问\">#</a> 16 题 (2) 问</h1>\n<p>先上题目</p>\n<blockquote>\n<ol start=\"16\">\n<li>一个 33 人的旅游团到一家酒店住宿，酒店的客房只剩下 4 间一人间和若干间三人间，价格为一人间每晚￥100，三人间每晚￥130。而且男性只能和男性住、女性只能和女性住，同时没住满的三人间也按￥130 计算。</li>\n</ol>\n</blockquote>\n<blockquote>\n<p>（2）这个旅游团租住了 3 间一人间，而且有 19 名男性，每晚的住宿费最低是￥_________。</p>\n</blockquote>\n<p>好的我们来翻译一下。</p>\n<ul>\n<li>\n<p>有 19 男和 14 女</p>\n</li>\n<li>\n<p>一人间￥100，三人间￥130</p>\n</li>\n<li>\n<p>一人间 3 个，三人间无限</p>\n</li>\n<li>\n<p>住不满三人间也得付全部的￥130</p>\n</li>\n</ul>\n<p>正如 STY 在愚人节那天发的<a href=\"https://ameitsu.github.io/2023/04/01/SofTY%20vol-1/\"> SofTY vol.1 | 又一个狠活的诞生</a>中提到</p>\n<blockquote>\n<p><center><font size = 6><i>…但问题是Python不是准JK…</i> </font></center></p>\n</blockquote>\n<p>她根本不知道怎么做这个题，只能硬枚举。（她管这个叫遍历）</p>\n<p>以免大家蒙在鼓里，以下的代码其实全是 STY 敲的</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> math</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>answer <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">#备选答案列表</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">Program</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    male <span class=\"token operator\">=</span> <span class=\"token number\">19</span> <span class=\"token comment\">#记录男性的人数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    female <span class=\"token operator\">=</span> <span class=\"token number\">14</span> <span class=\"token comment\">#记录女性的人数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    single_room_price <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token comment\">#记录单人间价格</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    triple_room_price <span class=\"token operator\">=</span> <span class=\"token number\">130</span> <span class=\"token comment\">#记录三人间价格</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#开始循环。这里的 4 是因为 range () 函数的最后一个参数不包含在范围内</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        male_single_rooms <span class=\"token operator\">=</span> i <span class=\"token comment\">#给男性分配单人间</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        female_single_rooms <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token operator\">-</span>i <span class=\"token comment\">#给女性分配单人间</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        male_triple_people <span class=\"token operator\">=</span> male<span class=\"token operator\">-</span>male_single_rooms <span class=\"token comment\">#求出有多少男性需要住三人间</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        female_triple_people <span class=\"token operator\">=</span> female<span class=\"token operator\">-</span>female_single_rooms <span class=\"token comment\">#求出有多少女性需要住三人间</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        male_triple_rooms <span class=\"token operator\">=</span> math<span class=\"token punctuation\">.</span>ceil<span class=\"token punctuation\">(</span>male_triple_people<span class=\"token operator\">/</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#求出男性需要的三人间数量</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        female_triple_rooms <span class=\"token operator\">=</span> math<span class=\"token punctuation\">.</span>ceil<span class=\"token punctuation\">(</span>female_triple_people<span class=\"token operator\">/</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#求出女性需要的三人间数量</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token comment\"># 注：ceil () 函数可以向上取整，例如 ceil (1.2) 的结果为 2</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        price <span class=\"token operator\">=</span> male_triple_rooms<span class=\"token operator\">*</span>triple_room_price <span class=\"token operator\">+</span> male_single_rooms<span class=\"token operator\">*</span>single_room_price<span class=\"token operator\">+</span>female_single_rooms<span class=\"token operator\">*</span>single_room_price<span class=\"token operator\">+</span>female_triple_rooms<span class=\"token operator\">*</span>triple_room_price <span class=\"token comment\">#求总价</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        answer<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 把结果添加到备选答案列表</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'最低价格为'</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>answer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">'元'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    Program<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#运行程序</span></pre></td></tr></table></figure><p>输出一下：</p>\n<pre><code>最低价格为1600元\n</code></pre>\n<p>okay 胜利结束。</p>\n<p>有人就问了，很明显我们没办法把电脑带到考场里，那该咋整捏？</p>\n<p>简单。对于人类来说，核心逻辑就是不花冤枉钱，或者说是都住满。主要是把 3 个单人间合理分配到男性和女性，使两边剩下的人数都是 3 的倍数。所以最省钱的方式是男性 1 间单人间、6 间三人间，女性 2 间单人间、4 间三人间。</p>\n<h1 id=\"28题3问\"><a class=\"anchor\" href=\"#28题3问\">#</a> 28 题 (3) 问</h1>\n<p>先上题目</p>\n<blockquote>\n<ol start=\"28\">\n<li>在平面直角坐标系 xOy 中，对于点 P，C，Q（点 P 与点 C 不重合），给出如下定义：若∠PCQ = 90°，且 CQ/CP = 1/k，则称点 Q 为点 P 关于点 C 的‘k 关联点’. 已知 A（3,0）B（0,3√3），⊙O 的半径为 r.</li>\n</ol>\n</blockquote>\n<blockquote>\n<p>(2). 点 P 是线段 AB 上的的任意一点，点 C 为线段 OB 上任意一点（不与点 B 重合）. 当 r = 3√21 时，⊙O 上不存在点 P 关于点 C 的‘k 关联点‘，直接写出 k 的取值范围:________.</p>\n</blockquote>\n<p>根据这个什么关联点的定义，能大致画一个这样的草图。</p>\n<div class=\"note info\">\n<p>本部分的电子作图为 2023 年 8 月 31 日添加，仅为原始过程的电子版，3 个月以后的 STY 不对此部分文字或图片内容负责</p>\n</div>\n<p><img data-src=\"https://cdnjson.com/images/2023/08/31/1.jpg\" alt=\"1.jpg\" /></p>\n<p>啊你问为什么非得往上画那个关联点点 N？因为往上画的 k 值更小。</p>\n<p>然后再作 <code>ND⊥y</code> ，作 <code>PF⊥y</code></p>\n<p>诶！这不是 <code>三垂直模型</code> 的相似嘛！于是可以设 <code>DC=a</code> 、 <code>ND=b</code> 、 <code>FP=ak</code> 、 <code>CF=bk</code> <br />\n<img data-src=\"https://cdnjson.com/images/2023/08/31/2.jpg\" alt=\"2.jpg\" /><br />\n 再连一下 <code>NF</code> ，这下就清楚了：终极目标是找到最小的 k，使 <code>NF</code> =3√21。为了找最小的 k，a 和 b 都应该取最大值，因此 ak 和 bk 都要是最大值。依据题目要求，ak 最大是 3，bk 最大是 3√3。<br />\n<img data-src=\"https://cdnjson.com/images/2023/08/31/3.jpg\" alt=\"3.jpg\" /><br />\n 所以接下来就是在 <code>Rt∆DNF</code>  中求一下就行。（很明显跳了亿点步骤）<br />\n<img data-src=\"https://cdnjson.com/images/2023/08/31/-2023-08-31-113123.jpg\" alt=\"-2023-08-31-113123.jpg\" /></p>\n<p><img data-src=\"https://cdnjson.com/images/2023/08/31/4.jpg\" alt=\"4.jpg\" /></p>\n<p>虽然解有两个，但这里是线段！线段的长度不可能有负数，所以只能取 k = √3/3，即 k 的最小值为√3/3。<br />\n<img data-src=\"https://i.imgs.ovh/i/2023/08/31/64f01a6e0f7a4.png\" alt=\"真正的.png\" /><br />\n 再加上点 C 不与点 B 重合，说明 bk 取不到 3√3，所以最终的答案为 <code>k ≥ √3/3 </code> ，结束。</p>\n<p>你看吧，确实用了不少  <em><strong>人工智慧</strong></em>。</p>\n<h1 id=\"免责声明\"><a class=\"anchor\" href=\"#免责声明\">#</a> 免责声明</h1>\n<ol>\n<li>\n<p>这个玩意不是什么答案过程，请您自己写。</p>\n</li>\n<li>\n<p>所有答案 STY 都对过标答了，但是有些步骤纯属现场重写，不排除出点什么错的可能性。</p>\n</li>\n</ol>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>",
            "tags": [
                "原创",
                "学习",
                "Python",
                "SofTY"
            ]
        },
        {
            "id": "https://ameitsu.github.io/SofTY/SofTY-STorY/SofTY/SofTY-STorY/%E5%87%91%E6%B4%BB%E8%83%BD%E7%94%A8%E5%B0%8F%E7%88%AC%E8%99%AB/",
            "url": "https://ameitsu.github.io/SofTY/SofTY-STorY/SofTY/SofTY-STorY/%E5%87%91%E6%B4%BB%E8%83%BD%E7%94%A8%E5%B0%8F%E7%88%AC%E8%99%AB/",
            "title": "SofTY vol.2|凑活能用小爬虫",
            "date_published": "2023-04-14T14:25:47.000Z",
            "content_html": "<p><img data-src=\"https://i.imgloc.com/2023/04/15/i7gSdZ.png\" alt=\"i7gSdZ.png\" /><br />\n<span id=\"more\"></span><br />\n 在开发中，我们时不时就发现自己要从某网站里扣出点有用的信息 <s>（比如 cosplay 套图和一堆地狱笑话）</s></p>\n<p>额，暴露了…… 但是确实我们会用到爬虫，对吧？</p>\n<p>可是吧…… 爬虫的一个显著的特点是代码会稍稍多一点（当然是 Python 啦），导致有些时候我们会懒得为了一个简简单单的小目的而专门造一个爬虫。</p>\n<p>额…… 这又是 STY 的问题，可是爬虫的格式相对还是很固定的，所以咱开启正题</p>\n<p>\n<center><font size = 10>如何快速造一个凑合能用的简单小爬虫</font></center>\n</p>\n<h1 id=\"step-1-爬虫\"><a class=\"anchor\" href=\"#step-1-爬虫\">#</a> STEP 1 - “爬” 虫</h1>\n<p>某非著名编程爱好者曾说过：</p>\n<blockquote>\n<p>爬虫要自己爬到互联网上。</p>\n<p>—— 浅野ナツキ</p>\n</blockquote>\n<p>所以我们第一步要让这个 Python 文件能<ins>访问网站</ins>。</p>\n<p>为了让它能访问网站，我们需要一个 <code>requests</code>  模块啊！</p>\n<pre><code class=\"language-Python\">import requests\n\nheaders = &#123;'useragent':'xxxxxxxxxx'&#125;\nurl = 'https://ameitsu.github.io'\nres = requests.get(url=url,headers=headers)\n\n</code></pre>\n<p>第 3 行里的 headers 很神奇 —— 它是一个<ins>小区门禁卡</ins>一样的东西。</p>\n<p>从设计目的上来说，useragent 是服务器判断访问文件的是人还是爬虫的防护措施，重点在于反爬虫。但是这也是它最大的问题：光天化日之下的爬虫能防住，<ins>套了个马甲</ins>的爬虫就不行了</p>\n<p>只要 headers 部分换上一个货真价实的，从浏览器里 copy 的 useragent，服务器就不知道这到底是爬虫还是人了。（妈耶，STY 小区门口的门禁系统比这个严密了不知多少倍）</p>\n<p>如果你懒得去查自己浏览器的 useragent，那不如试试 <code>fake_useragent</code>  模块，可以生成一个以假乱真的 header</p>\n<p>第 5 行里的 <code>res.get()</code>  是本部分的核心科技。 <code>url</code>  变量是将要访问的网址，有了网址和 headers <code>res.get()</code>  就能假扮人类访问目标网页了。<br />\n<img data-src=\"https://i.imgloc.com/2023/04/15/i7goqF.png\" alt=\"i7goqF.png\" /></p>\n<h1 id=\"step-2-处理战利品\"><a class=\"anchor\" href=\"#step-2-处理战利品\">#</a> STEP 2 - 处理战利品</h1>\n<p>人类上网会直接找到关键信息，然后<span class=\"kbd\"> Crtl</span>+<span class=\"kbd\">C</span>, 相当于信息的查看，筛选和利用一步就完成了。但是吧爬虫它不长脑子，得分几步做。</p>\n<h2 id=\"a处理html文件\"><a class=\"anchor\" href=\"#a处理html文件\">#</a> a. 处理.html 文件</h2>\n<p>爬虫的网络模块访问网址后只会把网页的 html 文档 copy 下来。真正分析出信息还得在本地进行。</p>\n<p>所以我们需要的是一个 <code>BeautifulSoup</code>  啊！把网页的 html 扣下来后像这样整就能正常地把 html 转换成方便解析的亚子。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> bs4 <span class=\"token keyword\">import</span> BeautifulSoup</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> requests</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'useragent'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'xxxxxxxxxx'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>url <span class=\"token operator\">=</span> <span class=\"token string\">'https://ameitsu.github.io'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>res <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token operator\">=</span>url<span class=\"token punctuation\">,</span>headers<span class=\"token operator\">=</span>headers<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>soup <span class=\"token operator\">=</span>BeautifulSoup<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span><span class=\"token string\">\"lxml\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>soup</code>  在这里就是能用来解析的 html 字符串。根据 STY 目前的经验，这个变量叫 &quot;soup&quot; 的原因纯粹是<ins>这个模块叫 &quot;BeautifulSoup&quot;</ins>……</p>\n<h2 id=\"b找标签\"><a class=\"anchor\" href=\"#b找标签\">#</a> b. 找标签</h2>\n<p>BeautifulSoup 的大杀器是 <code>.findall()</code> , 可以让你一下就通过 html 相关标签的规律直接匹配标签。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>contents <span class=\"token operator\">=</span> soup<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span>_target <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>_class <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>以上纯属示例，具体该匹配的的属性和值得看真实的需要。<br />\n<img data-src=\"https://i.imgloc.com/2023/04/15/i7gSdZ.png\" alt=\"i7gSdZ.png\" /><br />\n 最后输出的是一个列表类型的变量，看起来不好康，所以……</p>\n<h1 id=\"step-3-输出\"><a class=\"anchor\" href=\"#step-3-输出\">#</a> STEP 3 - 输出</h1>\n<p>…… 就用循环的方式打印一下。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> content <span class=\"token keyword\">in</span> contents<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>但是！如果需要记录信息的话还是写入到一个文件里更安全。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'result.txt'</span><span class=\"token punctuation\">,</span>encoding <span class=\"token operator\">=</span> <span class=\"token string\">'UTF-8'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> content <span class=\"token keyword\">in</span> contents<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>就酱。现在你有一个简单粗暴凑合能用的小爬虫了</p>\n<p>大概的代码是这样：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> bs4 <span class=\"token keyword\">import</span> BeautifulSoup</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> requests</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'useragent'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'xxxxxxxxxx'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>url <span class=\"token operator\">=</span> <span class=\"token string\">'https://www.example.com'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>res <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token operator\">=</span>url<span class=\"token punctuation\">,</span>headers<span class=\"token operator\">=</span>headers<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>soup <span class=\"token operator\">=</span>BeautifulSoup<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span><span class=\"token string\">\"lxml\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>contents <span class=\"token operator\">=</span> soup<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span>_target <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>_class <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'result.txt'</span><span class=\"token punctuation\">,</span>encoding <span class=\"token operator\">=</span> <span class=\"token string\">'UTF-8'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">for</span> content <span class=\"token keyword\">in</span> contents<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>啊？你问怎么抓包下载视频？BeautifulSoup 模块还有什么神奇操作？requests 模块还能玩出什么花？</p>\n<p>那 STY 只能说……<br />\n<img data-src=\"https://i.imgloc.com/2023/04/15/i7NB8U.jpeg\" alt=\"i7NB8U.jpeg\" /></p>\n<h1 id=\"最后\"><a class=\"anchor\" href=\"#最后\">#</a> 最后</h1>\n<p>中考一模快到了，我向孔子许愿。</p>\n<p>我祈福说让他保佑我 7 科满分，孔子说不行，只能三科。</p>\n<p>我说好的，语言学科、科学学科、素养学科。</p>\n<p>孔子说不行，只能两科。</p>\n<p>我说好的，文科、理科。</p>\n<p>孔子说不行，只能一科。</p>\n<p>我说可以。</p>\n<p>孔子一脸茫然地看着我，问：‘哪一科？’</p>\n<p>我说：‘每一科’</p>\n<div class=\"note info\">\n<p>向名人许愿 <span class=\"spoiler\" title=\"你知道得太多了\">并不</span> 能提高您的一模成绩</p>\n</div>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>",
            "tags": [
                "原创",
                "Python",
                "SofTY"
            ]
        },
        {
            "id": "https://ameitsu.github.io/SofTY/SofTY-STorY/SofTY/SofTY-STorY/%E4%BB%A3%E7%BB%BC%E8%AE%A1%E7%AE%97%E5%99%A8/",
            "url": "https://ameitsu.github.io/SofTY/SofTY-STorY/SofTY/SofTY-STorY/%E4%BB%A3%E7%BB%BC%E8%AE%A1%E7%AE%97%E5%99%A8/",
            "title": "SofTY vol.1|代综计算器",
            "date_published": "2023-04-01T04:34:47.000Z",
            "content_html": "<p><img data-src=\"https://i.imgloc.com/2023/04/01/iHV0Ny.jpeg\" alt=\"iHV0Ny.jpeg\" /><br />\n 最近的代综题好烦，先去只有<ins>半扇门</ins>的学校厕所哭一会儿（太夸张了⑧）<br />\n<span id=\"more\"></span><br />\n<img data-src=\"https://i.imgloc.com/2023/04/01/i2zgHN.jpeg\" alt=\"i2zgHN.jpeg\" title=\"以防万一你没见过代数综合是什么\" /></p>\n<p><img data-src=\"https://i.imgloc.com/2023/04/01/iHVk43.jpeg\" alt=\"iHVk43.jpeg\" title=\"给人的感觉……\" /></p>\n<p>好的我哭完了，来说一说这次的狠活。它是 ——</p>\n<p>\n<center><font size = 10>代综计算器</font></center>\n\n</p>\n<p>根据 STY 的技术力，代综计算器将采用 Python 编写</p>\n<p>大概包括这些功能：</p>\n<ul>\n<li>带入数据计算函数值</li>\n<li>求顶点和对称轴</li>\n<li>比较函数值大小（对称轴固定或为区间）</li>\n<li>含参坐标带入求值</li>\n<li>区间最值</li>\n<li>……<br />\n 同时还会有这些附带的小功能：</li>\n<li>化简二次根式</li>\n<li>编过程</li>\n<li>……</li>\n</ul>\n<p><ins>饼画得很好</ins>，然后压力来到了 STY 头上（笑）</p>\n<p>今天是愚人节，但是下面关于这个狠活的进度那可是非常准确滴：</p>\n<ul>\n<li>✅带入数据计算函数值</li>\n<li>✅求顶点和对称轴</li>\n<li>✅比较函数值大小（对称轴固定或为区间）</li>\n<li>❌含参坐标带入求值</li>\n<li>❌区间最值</li>\n<li>✅ 化简二次根式</li>\n<li>❌ 编过程</li>\n</ul>\n<div class=\"note info\">\n<p>至今，也只有这些功能</p>\n</div>\n<p>里面带数进去算、求顶点和对称轴和比较函数值大小纯粹是按照常规方法实现，但是我整出来的<ins>数据和字母分离</ins>的逻辑我自己觉滴很赞：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>y <span class=\"token operator\">=</span> mx² <span class=\"token operator\">+</span> 2nx <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>参数a的数据：<span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>参数a的字母：m</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>参数b的数据：<span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>参数b的字母：n</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>参数c的数据：<span class=\"token number\">1</span></pre></td></tr></table></figure><p>这样一来在带数计算和含参式子计算时候逻辑也非常清楚了：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>未知数x <span class=\"token operator\">=</span> p（常数）</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>计算时：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>计算后参数a的数据：<span class=\"token number\">1</span>² <span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>计算后参数a的字母：<span class=\"token string\">'m'</span> <span class=\"token operator\">+</span> <span class=\"token string\">'p²'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>计算后参数b的数据：<span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>计算后参数b的单位：<span class=\"token string\">'n'</span> <span class=\"token operator\">+</span> <span class=\"token string\">'p'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>参数c不变，略过</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>答案输出：y <span class=\"token operator\">=</span> mp² <span class=\"token operator\">+</span> 2np <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr></table></figure><p>这一段也是整个代综计算器的<ins>核心科技</ins></p>\n<p>但是吧整个项目目前我认为最 NB 的是化简二次根式的小算法（？？？）。里面有一个我在上操时候顿悟出来的小逻辑。</p>\n<p>\n<center><font size = 9>逆 向 开 方</font></center>\n</p>\n<p>正常情况下，初中生朋友们化简二次根式的方法是酱紫的：将被开方数拆成一个完全平方数乘另一个整数，将拆出来的完全平方数开方后移到根号外面，并且不能使根号下的整数能被再次拆分。</p>\n<p><img data-src=\"https://i.imgloc.com/2023/04/01/i2uy2H.png\" alt=\"i2uy2H.png\" /></p>\n<p>这种方法确实可以，在 Python 里可以枚举出 m，再乘 2 次方，接着用 a/m² 求出 n 并判断 n 是否为整数，从而挑出正确答案。</p>\n<p>但问题是 Python 不是准 JK，她没法一下知道哪个 m 最合适，于是就有了这种情况（以对 32 开方为例）：</p>\n<pre><code>&gt;&gt;&gt;  executing file.py\n1√32\n2√8\n4√2\n\n</code></pre>\n<p>没错，前几个答案都是错的，只有最后一个是对的。<br />\n所以我们要<strong>倒着来</strong>！逆向开方时，n 从小往大取，那么在所有符合要求的 m 和 n 中，第一个冒出来的组合的 n 值会是所有符合要求的 n 中最小的。换句话说，第一个算出来的就是<strong>最简二次根式</strong>。</p>\n<p>再加上在一些恰到好处的地方加 <code>break</code> ，就能实现算出正确答案后立刻跳出 <code>while</code>  循环。</p>\n<p>来都来了，那就把正在施工的开方代码贴出来⑧：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> math<span class=\"token comment\">#需要 math 模块的 math.sqrt () 和 math.trunk ()</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>answerlist <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token comment\">#记答案用的</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ExtractionObject</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>base<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span><span class=\"token comment\">#就是个正常的类定义</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        self<span class=\"token punctuation\">.</span>base <span class=\"token operator\">=</span> base <span class=\"token comment\">#base 就是要开方的底数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">Extraction</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        resultlist <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token comment\"># 开方的步骤量都会存在这里（第一项是最简二次根式的被开方数，第二项是最简二次根式前面的整数，第三项是任何情况下都会添加的原被开方数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        key <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">while</span> key<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            test <span class=\"token operator\">=</span> math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">)</span><span class=\"token comment\">#先开个方试试</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            test_trunked <span class=\"token operator\">=</span> math<span class=\"token punctuation\">.</span>trunc<span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span><span class=\"token comment\">#抹零算法，比以前不用 math 模块时用的先乘 10 再除 10 好多了</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">if</span> test <span class=\"token operator\">-</span> test_trunked <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token comment\">#print (' 对 &#123;0&#125; 的开方结果为  &#123;1&#125;'.format (str (self.base),str (int (math.sqrt (self.base)))))</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token comment\">#整个 if 逻辑判断一点用都没有，但是删了就得改后面所有的东西，还是留着吧</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    test2 <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>base <span class=\"token operator\">/</span> i</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                    <span class=\"token keyword\">if</span> math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span>test2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> math<span class=\"token punctuation\">.</span>trunc<span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span>test2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                        resultlist<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                        resultlist<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span>test2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                        key <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                        <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>               </pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            resultlist<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>resultlist<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token comment\"># 答案列表有三项时说明被开方数能被化简</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            flag1 <span class=\"token operator\">=</span> resultlist<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            flag2 <span class=\"token operator\">=</span> resultlist<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            answer <span class=\"token operator\">=</span> <span class=\"token string\">'&#123;0&#125;√&#123;1&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>flag1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>flag2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            answerlist<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>answer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            answer <span class=\"token operator\">=</span> <span class=\"token string\">'√&#123;0&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            answerlist<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>answer<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>就酱。</p>\n<p><img data-src=\"https://i.imgloc.com/2023/04/01/iHVCd5.png\" alt=\"iHVCd5.png\" title=\"图文无关，但是真的好好笑啊23333\" /></p>\n<p>最后，毕竟今天是愚人节，怎么着也得参与一下吧！但是我拒绝。</p>\n<p>但是浅野千华宇宙要进行大规模扩充了！暑假一开始就更。除了浅野双子以外还有 Scotia・Priestly, Arakansas・Yuena, 夜雨明等一堆曾经只在草稿纸上出现的人物。</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>",
            "tags": [
                "原创",
                "Python",
                "SofTY"
            ]
        }
    ]
}